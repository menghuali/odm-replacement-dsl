/**
 * generated by Xtext 2.17.0
 */
package poc.rules.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import poc.rules.ruleLanguage.DecisionTable;
import poc.rules.ruleLanguage.Rule;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RuleLanguageGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Rule> _filter = Iterables.<Rule>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Rule.class);
    for (final Rule e : _filter) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
      String _plus = (_string + ".js");
      fsa.generateFile(_plus, this.compile(e));
    }
    Iterable<DecisionTable> _filter_1 = Iterables.<DecisionTable>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), DecisionTable.class);
    for (final DecisionTable e_1 : _filter_1) {
      String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e_1).toString("/");
      String _plus_1 = (_string_1 + ".js");
      fsa.generateFile(_plus_1, this.compile(e_1));
    }
  }
  
  public CharSequence compile(final Rule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var ");
    String _name = rule.getName();
    _builder.append(_name);
    _builder.append(" = ()=> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("console.log(\'");
    String _description = rule.getDescription();
    _builder.append(_description, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("module.exports = {");
    String _name_1 = rule.getName();
    _builder.append(_name_1);
    _builder.append("};");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final DecisionTable table) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var ");
    String _name = table.getName();
    _builder.append(_name);
    _builder.append(" = ()=> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("console.log(\'");
    String _description = table.getDescription();
    _builder.append(_description, "\t");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("module.exports = {");
    String _name_1 = table.getName();
    _builder.append(_name_1);
    _builder.append("};");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
