/*
 * generated by Xtext 2.17.0
 */
package poc.rules.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import poc.rules.ruleLanguage.Rule
import poc.rules.ruleLanguage.DecisionTable

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RuleLanguageGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Rule)) {
			fsa.generateFile(e.fullyQualifiedName.toString('/') + ".js", e.compile)
		}

		for (e : resource.allContents.toIterable.filter(DecisionTable)) {
			fsa.generateFile(e.fullyQualifiedName.toString('/') + ".js", e.compile)
		}
	}

	def CharSequence compile(Rule rule) '''
		var «rule.name» = ()=> {
			console.log('«rule.description»');
		};
		
		module.exports = {«rule.name»};
	'''

	def CharSequence compile(DecisionTable table) '''
		var «table.name» = ()=> {
			console.log('«table.description»');
		};
		
		module.exports = {«table.name»};
	'''
}
