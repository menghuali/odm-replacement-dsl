/**
 * generated by Xtext 2.17.0
 */
package poc.rules.ruleLanguage.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import poc.rules.ruleLanguage.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see poc.rules.ruleLanguage.RuleLanguagePackage
 * @generated
 */
public class RuleLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RuleLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuleLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = RuleLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleLanguageSwitch<Adapter> modelSwitch =
    new RuleLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseRuleLanguage(RuleLanguage object)
      {
        return createRuleLanguageAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseRulePackage(RulePackage object)
      {
        return createRulePackageAdapter();
      }
      @Override
      public Adapter caseBookingPhrase(BookingPhrase object)
      {
        return createBookingPhraseAdapter();
      }
      @Override
      public Adapter caseFlightPhrase(FlightPhrase object)
      {
        return createFlightPhraseAdapter();
      }
      @Override
      public Adapter caseTripPhrase(TripPhrase object)
      {
        return createTripPhraseAdapter();
      }
      @Override
      public Adapter caseGuestPhrase(GuestPhrase object)
      {
        return createGuestPhraseAdapter();
      }
      @Override
      public Adapter caseNotificationPhrase(NotificationPhrase object)
      {
        return createNotificationPhraseAdapter();
      }
      @Override
      public Adapter caseNotificationAction(NotificationAction object)
      {
        return createNotificationActionAdapter();
      }
      @Override
      public Adapter caseFlightAction(FlightAction object)
      {
        return createFlightActionAdapter();
      }
      @Override
      public Adapter caseBookingAction(BookingAction object)
      {
        return createBookingActionAdapter();
      }
      @Override
      public Adapter caseGuestAction(GuestAction object)
      {
        return createGuestActionAdapter();
      }
      @Override
      public Adapter caseTripAction(TripAction object)
      {
        return createTripActionAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter caseECondition(ECondition object)
      {
        return createEConditionAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseSimpleCondition(SimpleCondition object)
      {
        return createSimpleConditionAdapter();
      }
      @Override
      public Adapter caseTripCondition(TripCondition object)
      {
        return createTripConditionAdapter();
      }
      @Override
      public Adapter caseGuestCondition(GuestCondition object)
      {
        return createGuestConditionAdapter();
      }
      @Override
      public Adapter caseBookingCondition(BookingCondition object)
      {
        return createBookingConditionAdapter();
      }
      @Override
      public Adapter caseFlightCondition(FlightCondition object)
      {
        return createFlightConditionAdapter();
      }
      @Override
      public Adapter caseNotificationCondition(NotificationCondition object)
      {
        return createNotificationConditionAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseENotificationAction(ENotificationAction object)
      {
        return createENotificationActionAdapter();
      }
      @Override
      public Adapter caseEFlightAction(EFlightAction object)
      {
        return createEFlightActionAdapter();
      }
      @Override
      public Adapter caseEBookingAction(EBookingAction object)
      {
        return createEBookingActionAdapter();
      }
      @Override
      public Adapter caseEGuestAction(EGuestAction object)
      {
        return createEGuestActionAdapter();
      }
      @Override
      public Adapter caseETripAction(ETripAction object)
      {
        return createETripActionAdapter();
      }
      @Override
      public Adapter caseDecisionTable(DecisionTable object)
      {
        return createDecisionTableAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.RuleLanguage <em>Rule Language</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.RuleLanguage
   * @generated
   */
  public Adapter createRuleLanguageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.RulePackage <em>Rule Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.RulePackage
   * @generated
   */
  public Adapter createRulePackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.BookingPhrase <em>Booking Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.BookingPhrase
   * @generated
   */
  public Adapter createBookingPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.FlightPhrase <em>Flight Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.FlightPhrase
   * @generated
   */
  public Adapter createFlightPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.TripPhrase <em>Trip Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.TripPhrase
   * @generated
   */
  public Adapter createTripPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.GuestPhrase <em>Guest Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.GuestPhrase
   * @generated
   */
  public Adapter createGuestPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.NotificationPhrase <em>Notification Phrase</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.NotificationPhrase
   * @generated
   */
  public Adapter createNotificationPhraseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.NotificationAction <em>Notification Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.NotificationAction
   * @generated
   */
  public Adapter createNotificationActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.FlightAction <em>Flight Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.FlightAction
   * @generated
   */
  public Adapter createFlightActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.BookingAction <em>Booking Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.BookingAction
   * @generated
   */
  public Adapter createBookingActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.GuestAction <em>Guest Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.GuestAction
   * @generated
   */
  public Adapter createGuestActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.TripAction <em>Trip Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.TripAction
   * @generated
   */
  public Adapter createTripActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.ECondition <em>ECondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.ECondition
   * @generated
   */
  public Adapter createEConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.SimpleCondition <em>Simple Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.SimpleCondition
   * @generated
   */
  public Adapter createSimpleConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.TripCondition <em>Trip Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.TripCondition
   * @generated
   */
  public Adapter createTripConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.GuestCondition <em>Guest Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.GuestCondition
   * @generated
   */
  public Adapter createGuestConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.BookingCondition <em>Booking Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.BookingCondition
   * @generated
   */
  public Adapter createBookingConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.FlightCondition <em>Flight Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.FlightCondition
   * @generated
   */
  public Adapter createFlightConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.NotificationCondition <em>Notification Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.NotificationCondition
   * @generated
   */
  public Adapter createNotificationConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.ENotificationAction <em>ENotification Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.ENotificationAction
   * @generated
   */
  public Adapter createENotificationActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.EFlightAction <em>EFlight Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.EFlightAction
   * @generated
   */
  public Adapter createEFlightActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.EBookingAction <em>EBooking Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.EBookingAction
   * @generated
   */
  public Adapter createEBookingActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.EGuestAction <em>EGuest Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.EGuestAction
   * @generated
   */
  public Adapter createEGuestActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.ETripAction <em>ETrip Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.ETripAction
   * @generated
   */
  public Adapter createETripActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link poc.rules.ruleLanguage.DecisionTable <em>Decision Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see poc.rules.ruleLanguage.DecisionTable
   * @generated
   */
  public Adapter createDecisionTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //RuleLanguageAdapterFactory
