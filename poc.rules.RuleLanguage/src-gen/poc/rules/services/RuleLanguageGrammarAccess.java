/*
 * generated by Xtext 2.17.0
 */
package poc.rules.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RuleLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.RuleLanguage");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//RuleLanguage:
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBookingPhraseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlightPhraseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTripPhraseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGuestPhraseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNotificationPhraseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNotificationActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFlightActionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBookingActionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGuestActionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTripActionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRulePackageParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Element:
		//	BookingPhrase | FlightPhrase | TripPhrase | GuestPhrase | NotificationPhrase | Action | NotificationAction |
		//	FlightAction | BookingAction | GuestAction | TripAction | RulePackage;
		@Override public ParserRule getRule() { return rule; }
		
		//BookingPhrase | FlightPhrase | TripPhrase | GuestPhrase | NotificationPhrase | Action | NotificationAction |
		//FlightAction | BookingAction | GuestAction | TripAction | RulePackage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BookingPhrase
		public RuleCall getBookingPhraseParserRuleCall_0() { return cBookingPhraseParserRuleCall_0; }
		
		//FlightPhrase
		public RuleCall getFlightPhraseParserRuleCall_1() { return cFlightPhraseParserRuleCall_1; }
		
		//TripPhrase
		public RuleCall getTripPhraseParserRuleCall_2() { return cTripPhraseParserRuleCall_2; }
		
		//GuestPhrase
		public RuleCall getGuestPhraseParserRuleCall_3() { return cGuestPhraseParserRuleCall_3; }
		
		//NotificationPhrase
		public RuleCall getNotificationPhraseParserRuleCall_4() { return cNotificationPhraseParserRuleCall_4; }
		
		//Action
		public RuleCall getActionParserRuleCall_5() { return cActionParserRuleCall_5; }
		
		//NotificationAction
		public RuleCall getNotificationActionParserRuleCall_6() { return cNotificationActionParserRuleCall_6; }
		
		//FlightAction
		public RuleCall getFlightActionParserRuleCall_7() { return cFlightActionParserRuleCall_7; }
		
		//BookingAction
		public RuleCall getBookingActionParserRuleCall_8() { return cBookingActionParserRuleCall_8; }
		
		//GuestAction
		public RuleCall getGuestActionParserRuleCall_9() { return cGuestActionParserRuleCall_9; }
		
		//TripAction
		public RuleCall getTripActionParserRuleCall_10() { return cTripActionParserRuleCall_10; }
		
		//RulePackage
		public RuleCall getRulePackageParserRuleCall_11() { return cRulePackageParserRuleCall_11; }
	}
	public class RulePackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.RulePackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cElementsAlternatives_3_0 = (Alternatives)cElementsAssignment_3.eContents().get(0);
		private final RuleCall cElementsRuleParserRuleCall_3_0_0 = (RuleCall)cElementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cElementsDecisionTableParserRuleCall_3_0_1 = (RuleCall)cElementsAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RulePackage:
		//	'package' name=QualifiedName '{'
		//	elements+=(Rule | DecisionTable)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=(Rule | DecisionTable)* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=(Rule | DecisionTable)*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//(Rule | DecisionTable)
		public Alternatives getElementsAlternatives_3_0() { return cElementsAlternatives_3_0; }
		
		//Rule
		public RuleCall getElementsRuleParserRuleCall_3_0_0() { return cElementsRuleParserRuleCall_3_0_0; }
		
		//DecisionTable
		public RuleCall getElementsDecisionTableParserRuleCall_3_0_1() { return cElementsDecisionTableParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class BookingPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.BookingPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BookingPhrase:
		//	'$booking' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$booking' name=ID
		public Group getGroup() { return cGroup; }
		
		//'$booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FlightPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.FlightPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FlightPhrase:
		//	'$flight' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$flight' name=ID
		public Group getGroup() { return cGroup; }
		
		//'$flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TripPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.TripPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTripKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TripPhrase:
		//	'$trip' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$trip' name=ID
		public Group getGroup() { return cGroup; }
		
		//'$trip'
		public Keyword getTripKeyword_0() { return cTripKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GuestPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.GuestPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GuestPhrase:
		//	'$guest' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$guest' name=ID
		public Group getGroup() { return cGroup; }
		
		//'$guest'
		public Keyword getGuestKeyword_0() { return cGuestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NotificationPhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.NotificationPhrase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NotificationPhrase:
		//	'$notification' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'$notification' name=ID
		public Group getGroup() { return cGroup; }
		
		//'$notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NotificationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.NotificationAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NotificationAction:
		//	'#notification' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#notification' name=ID
		public Group getGroup() { return cGroup; }
		
		//'#notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FlightActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.FlightAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FlightAction:
		//	'#flight' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#flight' name=ID
		public Group getGroup() { return cGroup; }
		
		//'#flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BookingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.BookingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BookingAction:
		//	'#booking' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#booking' name=ID
		public Group getGroup() { return cGroup; }
		
		//'#booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GuestActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.GuestAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GuestAction:
		//	'#guest' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#guest' name=ID
		public Group getGroup() { return cGroup; }
		
		//'#guest'
		public Keyword getGuestKeyword_0() { return cGuestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TripActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.TripAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTripKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TripAction:
		//	'#trip' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#trip' name=ID
		public Group getGroup() { return cGroup; }
		
		//'#trip'
		public Keyword getTripKeyword_0() { return cTripKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionsEConditionParserRuleCall_3_1_0 = (RuleCall)cConditionsAssignment_3_1.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		
		//Rule:
		//	'Rule' name=ID (':' description=STRING)? ('When' conditions+=ECondition*)?
		//	'Then' actions+=Action* ('Else' actions+=Action*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule' name=ID (':' description=STRING)? ('When' conditions+=ECondition*)? 'Then' actions+=Action* ('Else'
		//actions+=Action*)?
		public Group getGroup() { return cGroup; }
		
		//'Rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' description=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
		
		//('When' conditions+=ECondition*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'When'
		public Keyword getWhenKeyword_3_0() { return cWhenKeyword_3_0; }
		
		//conditions+=ECondition*
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//ECondition
		public RuleCall getConditionsEConditionParserRuleCall_3_1_0() { return cConditionsEConditionParserRuleCall_3_1_0; }
		
		//'Then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//('Else' actions+=Action*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'Else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_1_0() { return cActionsActionParserRuleCall_6_1_0; }
	}
	public class EConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.ECondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cConditionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ECondition:
		//	('And' | 'Or')? '('? 'Not'? Condition ')'?;
		@Override public ParserRule getRule() { return rule; }
		
		//('And' | 'Or')? '('? 'Not'? Condition ')'?
		public Group getGroup() { return cGroup; }
		
		//('And' | 'Or')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'And'
		public Keyword getAndKeyword_0_0() { return cAndKeyword_0_0; }
		
		//'Or'
		public Keyword getOrKeyword_0_1() { return cOrKeyword_0_1; }
		
		//'('?
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'Not'?
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_3() { return cConditionParserRuleCall_3; }
		
		//')'?
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.Condition");
		private final RuleCall cSimpleConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	SimpleCondition /*| AllTrue | AnyTrue | NoneTrue */;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleCondition
		public RuleCall getSimpleConditionParserRuleCall() { return cSimpleConditionParserRuleCall; }
	}
	public class SimpleConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.SimpleCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFlightConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBookingConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuestConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTripConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNotificationConditionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///*
		// NoneTrue:
		//	{NoneTrue} 'none_following_are_true:'
		//	('-' conditions+=SimpleCondition)* ',';
		//
		//AnyTrue:
		//	{AnyTrue} 'any_following_is_true:'
		//	('-' conditions+=SimpleCondition)* ',';
		//
		//AllTrue:
		//	{AllTrueCondition} 'all_following_are_true:'
		//	('-' conditions+=SimpleCondition)* ',';
		//*/ SimpleCondition:
		//	FlightCondition | BookingCondition | GuestCondition | TripCondition | NotificationCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//FlightCondition | BookingCondition | GuestCondition | TripCondition | NotificationCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FlightCondition
		public RuleCall getFlightConditionParserRuleCall_0() { return cFlightConditionParserRuleCall_0; }
		
		//BookingCondition
		public RuleCall getBookingConditionParserRuleCall_1() { return cBookingConditionParserRuleCall_1; }
		
		//GuestCondition
		public RuleCall getGuestConditionParserRuleCall_2() { return cGuestConditionParserRuleCall_2; }
		
		//TripCondition
		public RuleCall getTripConditionParserRuleCall_3() { return cTripConditionParserRuleCall_3; }
		
		//NotificationCondition
		public RuleCall getNotificationConditionParserRuleCall_4() { return cNotificationConditionParserRuleCall_4; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cContainKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Operator:
		//	'==' | '<=' | '>=' | 'in' | 'contain';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '<=' | '>=' | 'in' | 'contain'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//'contain'
		public Keyword getContainKeyword_4() { return cContainKeyword_4; }
	}
	public class TripConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.TripCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTripKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodTripPhraseCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodTripPhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodTripPhraseCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOrKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodTripPhraseCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodTripPhraseIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodTripPhraseCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_3_2_1_0 = (RuleCall)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_3_2_1_1 = (RuleCall)cAlternatives_3_2_1.eContents().get(1);
		
		//TripCondition:
		//	'trip' method+=[TripPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[TripPhrase] (Operator (VALUE |
		//	VALUES))?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'trip' method+=[TripPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[TripPhrase] (Operator (VALUE |
		//VALUES))?)*
		public Group getGroup() { return cGroup; }
		
		//'trip'
		public Keyword getTripKeyword_0() { return cTripKeyword_0; }
		
		//method+=[TripPhrase]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[TripPhrase]
		public CrossReference getMethodTripPhraseCrossReference_1_0() { return cMethodTripPhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodTripPhraseIDTerminalRuleCall_1_0_1() { return cMethodTripPhraseIDTerminalRuleCall_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_2() { return cGroup_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2_0() { return cOperatorParserRuleCall_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_2_1_0() { return cVALUEParserRuleCall_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_2_1_1() { return cVALUESParserRuleCall_2_1_1; }
		
		//(('and' | 'or') method+=[TripPhrase] (Operator (VALUE | VALUES))?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and' | 'or'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_0_1() { return cOrKeyword_3_0_1; }
		
		//method+=[TripPhrase]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[TripPhrase]
		public CrossReference getMethodTripPhraseCrossReference_3_1_0() { return cMethodTripPhraseCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodTripPhraseIDTerminalRuleCall_3_1_0_1() { return cMethodTripPhraseIDTerminalRuleCall_3_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_3_2_0() { return cOperatorParserRuleCall_3_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_3_2_1_0() { return cVALUEParserRuleCall_3_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_3_2_1_1() { return cVALUESParserRuleCall_3_2_1_1; }
	}
	public class GuestConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.GuestCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodGuestPhraseCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodGuestPhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodGuestPhraseCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOrKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodGuestPhraseCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodGuestPhraseIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodGuestPhraseCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_3_2_1_0 = (RuleCall)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_3_2_1_1 = (RuleCall)cAlternatives_3_2_1.eContents().get(1);
		
		//GuestCondition:
		//	'guest' method+=[GuestPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[GuestPhrase] (Operator (VALUE |
		//	VALUES))?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'guest' method+=[GuestPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[GuestPhrase] (Operator (VALUE |
		//VALUES))?)*
		public Group getGroup() { return cGroup; }
		
		//'guest'
		public Keyword getGuestKeyword_0() { return cGuestKeyword_0; }
		
		//method+=[GuestPhrase]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[GuestPhrase]
		public CrossReference getMethodGuestPhraseCrossReference_1_0() { return cMethodGuestPhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodGuestPhraseIDTerminalRuleCall_1_0_1() { return cMethodGuestPhraseIDTerminalRuleCall_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_2() { return cGroup_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2_0() { return cOperatorParserRuleCall_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_2_1_0() { return cVALUEParserRuleCall_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_2_1_1() { return cVALUESParserRuleCall_2_1_1; }
		
		//(('and' | 'or') method+=[GuestPhrase] (Operator (VALUE | VALUES))?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and' | 'or'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_0_1() { return cOrKeyword_3_0_1; }
		
		//method+=[GuestPhrase]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[GuestPhrase]
		public CrossReference getMethodGuestPhraseCrossReference_3_1_0() { return cMethodGuestPhraseCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodGuestPhraseIDTerminalRuleCall_3_1_0_1() { return cMethodGuestPhraseIDTerminalRuleCall_3_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_3_2_0() { return cOperatorParserRuleCall_3_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_3_2_1_0() { return cVALUEParserRuleCall_3_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_3_2_1_1() { return cVALUESParserRuleCall_3_2_1_1; }
	}
	public class BookingConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.BookingCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodBookingPhraseCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodBookingPhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodBookingPhraseCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOrKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodBookingPhraseCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodBookingPhraseIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodBookingPhraseCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_3_2_1_0 = (RuleCall)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_3_2_1_1 = (RuleCall)cAlternatives_3_2_1.eContents().get(1);
		
		//BookingCondition:
		//	'booking' method+=[BookingPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[BookingPhrase] (Operator
		//	(VALUE | VALUES))?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'booking' method+=[BookingPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[BookingPhrase] (Operator (VALUE
		//| VALUES))?)*
		public Group getGroup() { return cGroup; }
		
		//'booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//method+=[BookingPhrase]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[BookingPhrase]
		public CrossReference getMethodBookingPhraseCrossReference_1_0() { return cMethodBookingPhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodBookingPhraseIDTerminalRuleCall_1_0_1() { return cMethodBookingPhraseIDTerminalRuleCall_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_2() { return cGroup_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2_0() { return cOperatorParserRuleCall_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_2_1_0() { return cVALUEParserRuleCall_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_2_1_1() { return cVALUESParserRuleCall_2_1_1; }
		
		//(('and' | 'or') method+=[BookingPhrase] (Operator (VALUE | VALUES))?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and' | 'or'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_0_1() { return cOrKeyword_3_0_1; }
		
		//method+=[BookingPhrase]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[BookingPhrase]
		public CrossReference getMethodBookingPhraseCrossReference_3_1_0() { return cMethodBookingPhraseCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodBookingPhraseIDTerminalRuleCall_3_1_0_1() { return cMethodBookingPhraseIDTerminalRuleCall_3_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_3_2_0() { return cOperatorParserRuleCall_3_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_3_2_1_0() { return cVALUEParserRuleCall_3_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_3_2_1_1() { return cVALUESParserRuleCall_3_2_1_1; }
	}
	public class FlightConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.FlightCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodFlightPhraseCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodFlightPhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodFlightPhraseCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOrKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodFlightPhraseCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodFlightPhraseIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodFlightPhraseCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_3_2_1_0 = (RuleCall)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_3_2_1_1 = (RuleCall)cAlternatives_3_2_1.eContents().get(1);
		
		//FlightCondition:
		//	'flight' method+=[FlightPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[FlightPhrase] (Operator (VALUE |
		//	VALUES))?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'flight' method+=[FlightPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[FlightPhrase] (Operator (VALUE |
		//VALUES))?)*
		public Group getGroup() { return cGroup; }
		
		//'flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//method+=[FlightPhrase]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[FlightPhrase]
		public CrossReference getMethodFlightPhraseCrossReference_1_0() { return cMethodFlightPhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodFlightPhraseIDTerminalRuleCall_1_0_1() { return cMethodFlightPhraseIDTerminalRuleCall_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_2() { return cGroup_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2_0() { return cOperatorParserRuleCall_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_2_1_0() { return cVALUEParserRuleCall_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_2_1_1() { return cVALUESParserRuleCall_2_1_1; }
		
		//(('and' | 'or') method+=[FlightPhrase] (Operator (VALUE | VALUES))?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and' | 'or'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_0_1() { return cOrKeyword_3_0_1; }
		
		//method+=[FlightPhrase]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[FlightPhrase]
		public CrossReference getMethodFlightPhraseCrossReference_3_1_0() { return cMethodFlightPhraseCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodFlightPhraseIDTerminalRuleCall_3_1_0_1() { return cMethodFlightPhraseIDTerminalRuleCall_3_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_3_2_0() { return cOperatorParserRuleCall_3_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_3_2_1_0() { return cVALUEParserRuleCall_3_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_3_2_1_1() { return cVALUESParserRuleCall_3_2_1_1; }
	}
	public class NotificationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.NotificationCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodNotificationPhraseCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodNotificationPhraseIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodNotificationPhraseCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cAndKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cOrKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodNotificationPhraseCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodNotificationPhraseIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodNotificationPhraseCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final RuleCall cOperatorParserRuleCall_3_2_0 = (RuleCall)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final RuleCall cVALUEParserRuleCall_3_2_1_0 = (RuleCall)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cVALUESParserRuleCall_3_2_1_1 = (RuleCall)cAlternatives_3_2_1.eContents().get(1);
		
		//NotificationCondition:
		//	'notification' method+=[NotificationPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[NotificationPhrase]
		//	(Operator (VALUE | VALUES))?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'notification' method+=[NotificationPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[NotificationPhrase]
		//(Operator (VALUE | VALUES))?)*
		public Group getGroup() { return cGroup; }
		
		//'notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//method+=[NotificationPhrase]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[NotificationPhrase]
		public CrossReference getMethodNotificationPhraseCrossReference_1_0() { return cMethodNotificationPhraseCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodNotificationPhraseIDTerminalRuleCall_1_0_1() { return cMethodNotificationPhraseIDTerminalRuleCall_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_2() { return cGroup_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2_0() { return cOperatorParserRuleCall_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_2_1_0() { return cVALUEParserRuleCall_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_2_1_1() { return cVALUESParserRuleCall_2_1_1; }
		
		//(('and' | 'or') method+=[NotificationPhrase] (Operator (VALUE | VALUES))?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and' | 'or'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'and'
		public Keyword getAndKeyword_3_0_0() { return cAndKeyword_3_0_0; }
		
		//'or'
		public Keyword getOrKeyword_3_0_1() { return cOrKeyword_3_0_1; }
		
		//method+=[NotificationPhrase]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[NotificationPhrase]
		public CrossReference getMethodNotificationPhraseCrossReference_3_1_0() { return cMethodNotificationPhraseCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodNotificationPhraseIDTerminalRuleCall_3_1_0_1() { return cMethodNotificationPhraseIDTerminalRuleCall_3_1_0_1; }
		
		//(Operator (VALUE | VALUES))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_3_2_0() { return cOperatorParserRuleCall_3_2_0; }
		
		//VALUE | VALUES
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_3_2_1_0() { return cVALUEParserRuleCall_3_2_1_0; }
		
		//VALUES
		public RuleCall getVALUESParserRuleCall_3_2_1_1() { return cVALUESParserRuleCall_3_2_1_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cENotificationActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEFlightActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEBookingActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEGuestActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cETripActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Action:
		//	ENotificationAction | EFlightAction | EBookingAction | EGuestAction | ETripAction;
		@Override public ParserRule getRule() { return rule; }
		
		//ENotificationAction | EFlightAction | EBookingAction | EGuestAction | ETripAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ENotificationAction
		public RuleCall getENotificationActionParserRuleCall_0() { return cENotificationActionParserRuleCall_0; }
		
		//EFlightAction
		public RuleCall getEFlightActionParserRuleCall_1() { return cEFlightActionParserRuleCall_1; }
		
		//EBookingAction
		public RuleCall getEBookingActionParserRuleCall_2() { return cEBookingActionParserRuleCall_2; }
		
		//EGuestAction
		public RuleCall getEGuestActionParserRuleCall_3() { return cEGuestActionParserRuleCall_3; }
		
		//ETripAction
		public RuleCall getETripActionParserRuleCall_4() { return cETripActionParserRuleCall_4; }
	}
	public class ENotificationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.ENotificationAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodNotificationActionCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodNotificationActionIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodNotificationActionCrossReference_1_0.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParamAlternatives_2_0 = (Alternatives)cParamAssignment_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_2_0_0 = (RuleCall)cParamAlternatives_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_2_0_1 = (RuleCall)cParamAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodNotificationActionCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodNotificationActionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodNotificationActionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cParamAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cParamAlternatives_3_2_0 = (Alternatives)cParamAssignment_3_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_3_2_0_0 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_3_2_0_1 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(1);
		
		//ENotificationAction:
		//	'notification' method+=[NotificationAction] param+=(VALUE | VALUES)? ('and' method+=[NotificationAction] param+=(VALUE
		//	| VALUES)?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'notification' method+=[NotificationAction] param+=(VALUE | VALUES)? ('and' method+=[NotificationAction] param+=(VALUE |
		//VALUES)?)*
		public Group getGroup() { return cGroup; }
		
		//'notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//method+=[NotificationAction]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[NotificationAction]
		public CrossReference getMethodNotificationActionCrossReference_1_0() { return cMethodNotificationActionCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodNotificationActionIDTerminalRuleCall_1_0_1() { return cMethodNotificationActionIDTerminalRuleCall_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_2_0() { return cParamAlternatives_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_2_0_0() { return cParamVALUEParserRuleCall_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_2_0_1() { return cParamVALUESParserRuleCall_2_0_1; }
		
		//('and' method+=[NotificationAction] param+=(VALUE | VALUES)?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//method+=[NotificationAction]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[NotificationAction]
		public CrossReference getMethodNotificationActionCrossReference_3_1_0() { return cMethodNotificationActionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodNotificationActionIDTerminalRuleCall_3_1_0_1() { return cMethodNotificationActionIDTerminalRuleCall_3_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_3_2() { return cParamAssignment_3_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_3_2_0() { return cParamAlternatives_3_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_3_2_0_0() { return cParamVALUEParserRuleCall_3_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_3_2_0_1() { return cParamVALUESParserRuleCall_3_2_0_1; }
	}
	public class EFlightActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.EFlightAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodFlightActionCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodFlightActionIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodFlightActionCrossReference_1_0.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParamAlternatives_2_0 = (Alternatives)cParamAssignment_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_2_0_0 = (RuleCall)cParamAlternatives_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_2_0_1 = (RuleCall)cParamAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodFlightActionCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodFlightActionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodFlightActionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cParamAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cParamAlternatives_3_2_0 = (Alternatives)cParamAssignment_3_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_3_2_0_0 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_3_2_0_1 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(1);
		
		//EFlightAction:
		//	'flight' method+=[FlightAction] param+=(VALUE | VALUES)? ('and' method+=[FlightAction] param+=(VALUE | VALUES)?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'flight' method+=[FlightAction] param+=(VALUE | VALUES)? ('and' method+=[FlightAction] param+=(VALUE | VALUES)?)*
		public Group getGroup() { return cGroup; }
		
		//'flight'
		public Keyword getFlightKeyword_0() { return cFlightKeyword_0; }
		
		//method+=[FlightAction]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[FlightAction]
		public CrossReference getMethodFlightActionCrossReference_1_0() { return cMethodFlightActionCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodFlightActionIDTerminalRuleCall_1_0_1() { return cMethodFlightActionIDTerminalRuleCall_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_2_0() { return cParamAlternatives_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_2_0_0() { return cParamVALUEParserRuleCall_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_2_0_1() { return cParamVALUESParserRuleCall_2_0_1; }
		
		//('and' method+=[FlightAction] param+=(VALUE | VALUES)?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//method+=[FlightAction]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[FlightAction]
		public CrossReference getMethodFlightActionCrossReference_3_1_0() { return cMethodFlightActionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodFlightActionIDTerminalRuleCall_3_1_0_1() { return cMethodFlightActionIDTerminalRuleCall_3_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_3_2() { return cParamAssignment_3_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_3_2_0() { return cParamAlternatives_3_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_3_2_0_0() { return cParamVALUEParserRuleCall_3_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_3_2_0_1() { return cParamVALUESParserRuleCall_3_2_0_1; }
	}
	public class EBookingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.EBookingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodBookingActionCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodBookingActionIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodBookingActionCrossReference_1_0.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParamAlternatives_2_0 = (Alternatives)cParamAssignment_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_2_0_0 = (RuleCall)cParamAlternatives_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_2_0_1 = (RuleCall)cParamAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodBookingActionCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodBookingActionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodBookingActionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cParamAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cParamAlternatives_3_2_0 = (Alternatives)cParamAssignment_3_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_3_2_0_0 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_3_2_0_1 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(1);
		
		//EBookingAction:
		//	'booking' method+=[BookingAction] param+=(VALUE | VALUES)? ('and' method+=[BookingAction] param+=(VALUE | VALUES)?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'booking' method+=[BookingAction] param+=(VALUE | VALUES)? ('and' method+=[BookingAction] param+=(VALUE | VALUES)?)*
		public Group getGroup() { return cGroup; }
		
		//'booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//method+=[BookingAction]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[BookingAction]
		public CrossReference getMethodBookingActionCrossReference_1_0() { return cMethodBookingActionCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodBookingActionIDTerminalRuleCall_1_0_1() { return cMethodBookingActionIDTerminalRuleCall_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_2_0() { return cParamAlternatives_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_2_0_0() { return cParamVALUEParserRuleCall_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_2_0_1() { return cParamVALUESParserRuleCall_2_0_1; }
		
		//('and' method+=[BookingAction] param+=(VALUE | VALUES)?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//method+=[BookingAction]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[BookingAction]
		public CrossReference getMethodBookingActionCrossReference_3_1_0() { return cMethodBookingActionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodBookingActionIDTerminalRuleCall_3_1_0_1() { return cMethodBookingActionIDTerminalRuleCall_3_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_3_2() { return cParamAssignment_3_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_3_2_0() { return cParamAlternatives_3_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_3_2_0_0() { return cParamVALUEParserRuleCall_3_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_3_2_0_1() { return cParamVALUESParserRuleCall_3_2_0_1; }
	}
	public class EGuestActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.EGuestAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodGuestActionCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodGuestActionIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodGuestActionCrossReference_1_0.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParamAlternatives_2_0 = (Alternatives)cParamAssignment_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_2_0_0 = (RuleCall)cParamAlternatives_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_2_0_1 = (RuleCall)cParamAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodGuestActionCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodGuestActionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodGuestActionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cParamAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cParamAlternatives_3_2_0 = (Alternatives)cParamAssignment_3_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_3_2_0_0 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_3_2_0_1 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(1);
		
		//EGuestAction:
		//	'guest' method+=[GuestAction] param+=(VALUE | VALUES)? ('and' method+=[GuestAction] param+=(VALUE | VALUES)?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'guest' method+=[GuestAction] param+=(VALUE | VALUES)? ('and' method+=[GuestAction] param+=(VALUE | VALUES)?)*
		public Group getGroup() { return cGroup; }
		
		//'guest'
		public Keyword getGuestKeyword_0() { return cGuestKeyword_0; }
		
		//method+=[GuestAction]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[GuestAction]
		public CrossReference getMethodGuestActionCrossReference_1_0() { return cMethodGuestActionCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodGuestActionIDTerminalRuleCall_1_0_1() { return cMethodGuestActionIDTerminalRuleCall_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_2_0() { return cParamAlternatives_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_2_0_0() { return cParamVALUEParserRuleCall_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_2_0_1() { return cParamVALUESParserRuleCall_2_0_1; }
		
		//('and' method+=[GuestAction] param+=(VALUE | VALUES)?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//method+=[GuestAction]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[GuestAction]
		public CrossReference getMethodGuestActionCrossReference_3_1_0() { return cMethodGuestActionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodGuestActionIDTerminalRuleCall_3_1_0_1() { return cMethodGuestActionIDTerminalRuleCall_3_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_3_2() { return cParamAssignment_3_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_3_2_0() { return cParamAlternatives_3_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_3_2_0_0() { return cParamVALUEParserRuleCall_3_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_3_2_0_1() { return cParamVALUESParserRuleCall_3_2_0_1; }
	}
	public class ETripActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.ETripAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTripKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethodTripActionCrossReference_1_0 = (CrossReference)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cMethodTripActionIDTerminalRuleCall_1_0_1 = (RuleCall)cMethodTripActionCrossReference_1_0.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParamAlternatives_2_0 = (Alternatives)cParamAssignment_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_2_0_0 = (RuleCall)cParamAlternatives_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_2_0_1 = (RuleCall)cParamAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMethodTripActionCrossReference_3_1_0 = (CrossReference)cMethodAssignment_3_1.eContents().get(0);
		private final RuleCall cMethodTripActionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMethodTripActionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cParamAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Alternatives cParamAlternatives_3_2_0 = (Alternatives)cParamAssignment_3_2.eContents().get(0);
		private final RuleCall cParamVALUEParserRuleCall_3_2_0_0 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cParamVALUESParserRuleCall_3_2_0_1 = (RuleCall)cParamAlternatives_3_2_0.eContents().get(1);
		
		//ETripAction:
		//	'trip' method+=[TripAction] param+=(VALUE | VALUES)? ('and' method+=[TripAction] param+=(VALUE | VALUES)?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'trip' method+=[TripAction] param+=(VALUE | VALUES)? ('and' method+=[TripAction] param+=(VALUE | VALUES)?)*
		public Group getGroup() { return cGroup; }
		
		//'trip'
		public Keyword getTripKeyword_0() { return cTripKeyword_0; }
		
		//method+=[TripAction]
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//[TripAction]
		public CrossReference getMethodTripActionCrossReference_1_0() { return cMethodTripActionCrossReference_1_0; }
		
		//ID
		public RuleCall getMethodTripActionIDTerminalRuleCall_1_0_1() { return cMethodTripActionIDTerminalRuleCall_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_2_0() { return cParamAlternatives_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_2_0_0() { return cParamVALUEParserRuleCall_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_2_0_1() { return cParamVALUESParserRuleCall_2_0_1; }
		
		//('and' method+=[TripAction] param+=(VALUE | VALUES)?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//method+=[TripAction]
		public Assignment getMethodAssignment_3_1() { return cMethodAssignment_3_1; }
		
		//[TripAction]
		public CrossReference getMethodTripActionCrossReference_3_1_0() { return cMethodTripActionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMethodTripActionIDTerminalRuleCall_3_1_0_1() { return cMethodTripActionIDTerminalRuleCall_3_1_0_1; }
		
		//param+=(VALUE | VALUES)?
		public Assignment getParamAssignment_3_2() { return cParamAssignment_3_2; }
		
		//(VALUE | VALUES)
		public Alternatives getParamAlternatives_3_2_0() { return cParamAlternatives_3_2_0; }
		
		//VALUE
		public RuleCall getParamVALUEParserRuleCall_3_2_0_0() { return cParamVALUEParserRuleCall_3_2_0_0; }
		
		//VALUES
		public RuleCall getParamVALUESParserRuleCall_3_2_0_1() { return cParamVALUESParserRuleCall_3_2_0_1; }
	}
	public class VALUESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.VALUES");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVALUEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cVALUEParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VALUES:
		//	'(' VALUE (',' VALUE)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' VALUE (',' VALUE)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_1() { return cVALUEParserRuleCall_1; }
		
		//(',' VALUE)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//VALUE
		public RuleCall getVALUEParserRuleCall_2_1() { return cVALUEParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.VALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//VALUE:
		//	INT | STRING | 'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING | 'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//'true'
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }
		
		//'false'
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }
	}
	public class DecisionTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "poc.rules.RuleLanguage.DecisionTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsSimpleConditionParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVerticalLineKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionsSimpleConditionParserRuleCall_5_1_0 = (RuleCall)cConditionsAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsActionParserRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Keyword cVerticalLineKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cActionsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_9_0_0 = (RuleCall)cActionsAssignment_9_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVerticalLineKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cCellsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cCellsVALUEParserRuleCall_10_1_0 = (RuleCall)cCellsAssignment_10_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cCellsAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cCellsVALUEParserRuleCall_10_3_0_0 = (RuleCall)cCellsAssignment_10_3_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_10_3_1 = (Keyword)cGroup_10_3.eContents().get(1);
		
		//DecisionTable:
		//	'Table' name=ID (':' description=STRING)?
		//	'|' conditions+=SimpleCondition ('|' conditions+=SimpleCondition)* '|' actions+=Action '|' (actions+=Action '|')* ('|'
		//	cells+=VALUE '|' (cells+=VALUE '|')*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Table' name=ID (':' description=STRING)? '|' conditions+=SimpleCondition ('|' conditions+=SimpleCondition)* '|'
		//actions+=Action '|' (actions+=Action '|')* ('|' cells+=VALUE '|' (cells+=VALUE '|')*)*
		public Group getGroup() { return cGroup; }
		
		//'Table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' description=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
		
		//conditions+=SimpleCondition
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }
		
		//SimpleCondition
		public RuleCall getConditionsSimpleConditionParserRuleCall_4_0() { return cConditionsSimpleConditionParserRuleCall_4_0; }
		
		//('|' conditions+=SimpleCondition)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5_0() { return cVerticalLineKeyword_5_0; }
		
		//conditions+=SimpleCondition
		public Assignment getConditionsAssignment_5_1() { return cConditionsAssignment_5_1; }
		
		//SimpleCondition
		public RuleCall getConditionsSimpleConditionParserRuleCall_5_1_0() { return cConditionsSimpleConditionParserRuleCall_5_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_6() { return cVerticalLineKeyword_6; }
		
		//actions+=Action
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_7_0() { return cActionsActionParserRuleCall_7_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_8() { return cVerticalLineKeyword_8; }
		
		//(actions+=Action '|')*
		public Group getGroup_9() { return cGroup_9; }
		
		//actions+=Action
		public Assignment getActionsAssignment_9_0() { return cActionsAssignment_9_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_9_0_0() { return cActionsActionParserRuleCall_9_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_9_1() { return cVerticalLineKeyword_9_1; }
		
		//('|' cells+=VALUE '|' (cells+=VALUE '|')*)*
		public Group getGroup_10() { return cGroup_10; }
		
		//'|'
		public Keyword getVerticalLineKeyword_10_0() { return cVerticalLineKeyword_10_0; }
		
		//cells+=VALUE
		public Assignment getCellsAssignment_10_1() { return cCellsAssignment_10_1; }
		
		//VALUE
		public RuleCall getCellsVALUEParserRuleCall_10_1_0() { return cCellsVALUEParserRuleCall_10_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_10_2() { return cVerticalLineKeyword_10_2; }
		
		//(cells+=VALUE '|')*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//cells+=VALUE
		public Assignment getCellsAssignment_10_3_0() { return cCellsAssignment_10_3_0; }
		
		//VALUE
		public RuleCall getCellsVALUEParserRuleCall_10_3_0_0() { return cCellsVALUEParserRuleCall_10_3_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_10_3_1() { return cVerticalLineKeyword_10_3_1; }
	}
	
	
	private final RuleLanguageElements pRuleLanguage;
	private final ElementElements pElement;
	private final RulePackageElements pRulePackage;
	private final QualifiedNameElements pQualifiedName;
	private final BookingPhraseElements pBookingPhrase;
	private final FlightPhraseElements pFlightPhrase;
	private final TripPhraseElements pTripPhrase;
	private final GuestPhraseElements pGuestPhrase;
	private final NotificationPhraseElements pNotificationPhrase;
	private final NotificationActionElements pNotificationAction;
	private final FlightActionElements pFlightAction;
	private final BookingActionElements pBookingAction;
	private final GuestActionElements pGuestAction;
	private final TripActionElements pTripAction;
	private final RuleElements pRule;
	private final EConditionElements pECondition;
	private final ConditionElements pCondition;
	private final SimpleConditionElements pSimpleCondition;
	private final OperatorElements pOperator;
	private final TripConditionElements pTripCondition;
	private final GuestConditionElements pGuestCondition;
	private final BookingConditionElements pBookingCondition;
	private final FlightConditionElements pFlightCondition;
	private final NotificationConditionElements pNotificationCondition;
	private final ActionElements pAction;
	private final ENotificationActionElements pENotificationAction;
	private final EFlightActionElements pEFlightAction;
	private final EBookingActionElements pEBookingAction;
	private final EGuestActionElements pEGuestAction;
	private final ETripActionElements pETripAction;
	private final VALUESElements pVALUES;
	private final VALUEElements pVALUE;
	private final DecisionTableElements pDecisionTable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RuleLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleLanguage = new RuleLanguageElements();
		this.pElement = new ElementElements();
		this.pRulePackage = new RulePackageElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pBookingPhrase = new BookingPhraseElements();
		this.pFlightPhrase = new FlightPhraseElements();
		this.pTripPhrase = new TripPhraseElements();
		this.pGuestPhrase = new GuestPhraseElements();
		this.pNotificationPhrase = new NotificationPhraseElements();
		this.pNotificationAction = new NotificationActionElements();
		this.pFlightAction = new FlightActionElements();
		this.pBookingAction = new BookingActionElements();
		this.pGuestAction = new GuestActionElements();
		this.pTripAction = new TripActionElements();
		this.pRule = new RuleElements();
		this.pECondition = new EConditionElements();
		this.pCondition = new ConditionElements();
		this.pSimpleCondition = new SimpleConditionElements();
		this.pOperator = new OperatorElements();
		this.pTripCondition = new TripConditionElements();
		this.pGuestCondition = new GuestConditionElements();
		this.pBookingCondition = new BookingConditionElements();
		this.pFlightCondition = new FlightConditionElements();
		this.pNotificationCondition = new NotificationConditionElements();
		this.pAction = new ActionElements();
		this.pENotificationAction = new ENotificationActionElements();
		this.pEFlightAction = new EFlightActionElements();
		this.pEBookingAction = new EBookingActionElements();
		this.pEGuestAction = new EGuestActionElements();
		this.pETripAction = new ETripActionElements();
		this.pVALUES = new VALUESElements();
		this.pVALUE = new VALUEElements();
		this.pDecisionTable = new DecisionTableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("poc.rules.RuleLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleLanguage:
	//	elements+=Element*;
	public RuleLanguageElements getRuleLanguageAccess() {
		return pRuleLanguage;
	}
	
	public ParserRule getRuleLanguageRule() {
		return getRuleLanguageAccess().getRule();
	}
	
	//Element:
	//	BookingPhrase | FlightPhrase | TripPhrase | GuestPhrase | NotificationPhrase | Action | NotificationAction |
	//	FlightAction | BookingAction | GuestAction | TripAction | RulePackage;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//RulePackage:
	//	'package' name=QualifiedName '{'
	//	elements+=(Rule | DecisionTable)*
	//	'}';
	public RulePackageElements getRulePackageAccess() {
		return pRulePackage;
	}
	
	public ParserRule getRulePackageRule() {
		return getRulePackageAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//BookingPhrase:
	//	'$booking' name=ID;
	public BookingPhraseElements getBookingPhraseAccess() {
		return pBookingPhrase;
	}
	
	public ParserRule getBookingPhraseRule() {
		return getBookingPhraseAccess().getRule();
	}
	
	//FlightPhrase:
	//	'$flight' name=ID;
	public FlightPhraseElements getFlightPhraseAccess() {
		return pFlightPhrase;
	}
	
	public ParserRule getFlightPhraseRule() {
		return getFlightPhraseAccess().getRule();
	}
	
	//TripPhrase:
	//	'$trip' name=ID;
	public TripPhraseElements getTripPhraseAccess() {
		return pTripPhrase;
	}
	
	public ParserRule getTripPhraseRule() {
		return getTripPhraseAccess().getRule();
	}
	
	//GuestPhrase:
	//	'$guest' name=ID;
	public GuestPhraseElements getGuestPhraseAccess() {
		return pGuestPhrase;
	}
	
	public ParserRule getGuestPhraseRule() {
		return getGuestPhraseAccess().getRule();
	}
	
	//NotificationPhrase:
	//	'$notification' name=ID;
	public NotificationPhraseElements getNotificationPhraseAccess() {
		return pNotificationPhrase;
	}
	
	public ParserRule getNotificationPhraseRule() {
		return getNotificationPhraseAccess().getRule();
	}
	
	//NotificationAction:
	//	'#notification' name=ID;
	public NotificationActionElements getNotificationActionAccess() {
		return pNotificationAction;
	}
	
	public ParserRule getNotificationActionRule() {
		return getNotificationActionAccess().getRule();
	}
	
	//FlightAction:
	//	'#flight' name=ID;
	public FlightActionElements getFlightActionAccess() {
		return pFlightAction;
	}
	
	public ParserRule getFlightActionRule() {
		return getFlightActionAccess().getRule();
	}
	
	//BookingAction:
	//	'#booking' name=ID;
	public BookingActionElements getBookingActionAccess() {
		return pBookingAction;
	}
	
	public ParserRule getBookingActionRule() {
		return getBookingActionAccess().getRule();
	}
	
	//GuestAction:
	//	'#guest' name=ID;
	public GuestActionElements getGuestActionAccess() {
		return pGuestAction;
	}
	
	public ParserRule getGuestActionRule() {
		return getGuestActionAccess().getRule();
	}
	
	//TripAction:
	//	'#trip' name=ID;
	public TripActionElements getTripActionAccess() {
		return pTripAction;
	}
	
	public ParserRule getTripActionRule() {
		return getTripActionAccess().getRule();
	}
	
	//Rule:
	//	'Rule' name=ID (':' description=STRING)? ('When' conditions+=ECondition*)?
	//	'Then' actions+=Action* ('Else' actions+=Action*)?;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//ECondition:
	//	('And' | 'Or')? '('? 'Not'? Condition ')'?;
	public EConditionElements getEConditionAccess() {
		return pECondition;
	}
	
	public ParserRule getEConditionRule() {
		return getEConditionAccess().getRule();
	}
	
	//Condition:
	//	SimpleCondition /*| AllTrue | AnyTrue | NoneTrue */;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	///*
	// NoneTrue:
	//	{NoneTrue} 'none_following_are_true:'
	//	('-' conditions+=SimpleCondition)* ',';
	//
	//AnyTrue:
	//	{AnyTrue} 'any_following_is_true:'
	//	('-' conditions+=SimpleCondition)* ',';
	//
	//AllTrue:
	//	{AllTrueCondition} 'all_following_are_true:'
	//	('-' conditions+=SimpleCondition)* ',';
	//*/ SimpleCondition:
	//	FlightCondition | BookingCondition | GuestCondition | TripCondition | NotificationCondition;
	public SimpleConditionElements getSimpleConditionAccess() {
		return pSimpleCondition;
	}
	
	public ParserRule getSimpleConditionRule() {
		return getSimpleConditionAccess().getRule();
	}
	
	//Operator:
	//	'==' | '<=' | '>=' | 'in' | 'contain';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//TripCondition:
	//	'trip' method+=[TripPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[TripPhrase] (Operator (VALUE |
	//	VALUES))?)*;
	public TripConditionElements getTripConditionAccess() {
		return pTripCondition;
	}
	
	public ParserRule getTripConditionRule() {
		return getTripConditionAccess().getRule();
	}
	
	//GuestCondition:
	//	'guest' method+=[GuestPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[GuestPhrase] (Operator (VALUE |
	//	VALUES))?)*;
	public GuestConditionElements getGuestConditionAccess() {
		return pGuestCondition;
	}
	
	public ParserRule getGuestConditionRule() {
		return getGuestConditionAccess().getRule();
	}
	
	//BookingCondition:
	//	'booking' method+=[BookingPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[BookingPhrase] (Operator
	//	(VALUE | VALUES))?)*;
	public BookingConditionElements getBookingConditionAccess() {
		return pBookingCondition;
	}
	
	public ParserRule getBookingConditionRule() {
		return getBookingConditionAccess().getRule();
	}
	
	//FlightCondition:
	//	'flight' method+=[FlightPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[FlightPhrase] (Operator (VALUE |
	//	VALUES))?)*;
	public FlightConditionElements getFlightConditionAccess() {
		return pFlightCondition;
	}
	
	public ParserRule getFlightConditionRule() {
		return getFlightConditionAccess().getRule();
	}
	
	//NotificationCondition:
	//	'notification' method+=[NotificationPhrase] (Operator (VALUE | VALUES))? (('and' | 'or') method+=[NotificationPhrase]
	//	(Operator (VALUE | VALUES))?)*;
	public NotificationConditionElements getNotificationConditionAccess() {
		return pNotificationCondition;
	}
	
	public ParserRule getNotificationConditionRule() {
		return getNotificationConditionAccess().getRule();
	}
	
	//Action:
	//	ENotificationAction | EFlightAction | EBookingAction | EGuestAction | ETripAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ENotificationAction:
	//	'notification' method+=[NotificationAction] param+=(VALUE | VALUES)? ('and' method+=[NotificationAction] param+=(VALUE
	//	| VALUES)?)*;
	public ENotificationActionElements getENotificationActionAccess() {
		return pENotificationAction;
	}
	
	public ParserRule getENotificationActionRule() {
		return getENotificationActionAccess().getRule();
	}
	
	//EFlightAction:
	//	'flight' method+=[FlightAction] param+=(VALUE | VALUES)? ('and' method+=[FlightAction] param+=(VALUE | VALUES)?)*;
	public EFlightActionElements getEFlightActionAccess() {
		return pEFlightAction;
	}
	
	public ParserRule getEFlightActionRule() {
		return getEFlightActionAccess().getRule();
	}
	
	//EBookingAction:
	//	'booking' method+=[BookingAction] param+=(VALUE | VALUES)? ('and' method+=[BookingAction] param+=(VALUE | VALUES)?)*;
	public EBookingActionElements getEBookingActionAccess() {
		return pEBookingAction;
	}
	
	public ParserRule getEBookingActionRule() {
		return getEBookingActionAccess().getRule();
	}
	
	//EGuestAction:
	//	'guest' method+=[GuestAction] param+=(VALUE | VALUES)? ('and' method+=[GuestAction] param+=(VALUE | VALUES)?)*;
	public EGuestActionElements getEGuestActionAccess() {
		return pEGuestAction;
	}
	
	public ParserRule getEGuestActionRule() {
		return getEGuestActionAccess().getRule();
	}
	
	//ETripAction:
	//	'trip' method+=[TripAction] param+=(VALUE | VALUES)? ('and' method+=[TripAction] param+=(VALUE | VALUES)?)*;
	public ETripActionElements getETripActionAccess() {
		return pETripAction;
	}
	
	public ParserRule getETripActionRule() {
		return getETripActionAccess().getRule();
	}
	
	//VALUES:
	//	'(' VALUE (',' VALUE)* ')';
	public VALUESElements getVALUESAccess() {
		return pVALUES;
	}
	
	public ParserRule getVALUESRule() {
		return getVALUESAccess().getRule();
	}
	
	//VALUE:
	//	INT | STRING | 'true' | 'false';
	public VALUEElements getVALUEAccess() {
		return pVALUE;
	}
	
	public ParserRule getVALUERule() {
		return getVALUEAccess().getRule();
	}
	
	//DecisionTable:
	//	'Table' name=ID (':' description=STRING)?
	//	'|' conditions+=SimpleCondition ('|' conditions+=SimpleCondition)* '|' actions+=Action '|' (actions+=Action '|')* ('|'
	//	cells+=VALUE '|' (cells+=VALUE '|')*)*;
	public DecisionTableElements getDecisionTableAccess() {
		return pDecisionTable;
	}
	
	public ParserRule getDecisionTableRule() {
		return getDecisionTableAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
